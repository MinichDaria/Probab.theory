{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Задание 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "65.3"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = [100, 80, 75, 77, 89, 33, 45, 25, 65, 17, 30, 24, 57, 55, 70, 75, 65, 84, 90, 150]\n",
    "sa = sum(a) / len(a)\n",
    "sa"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "30.823854398825596"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from math import sqrt\n",
    "s = 0\n",
    "for i in a:\n",
    "    s += (i - sa) ** 2\n",
    "sigma = sqrt(s / len(a))\n",
    "sigma"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "950.11"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sd = sigma ** 2\n",
    "sd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1000.1157894736842"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s1 = 0\n",
    "for i in a:\n",
    "    s1 += (i - sa) ** 2\n",
    "nd = s / (len(a) - 1)\n",
    "nd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Задание 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.1488095238095238 0.0946969696969697 0.045454545454545456\n",
      "0.288961038961039\n"
     ]
    }
   ],
   "source": [
    "from math import factorial\n",
    "def comb(n, k):\n",
    "    return int(factorial(n) / (factorial(k) * factorial(n-k)))\n",
    "p1 = comb(5, 2) / comb(8, 2) * comb(5, 1) / comb(12, 1)\n",
    "p2 = comb(5, 1) / comb(8, 1) * comb(5, 2) / comb(12, 2)\n",
    "p3 = comb(5, 0) / comb(8, 0) * comb(5, 3) / comb(12, 3)\n",
    "p = p1 + p2 + p3\n",
    "print(p1, p2, p3)\n",
    "print(p)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Задание 3 что то не соображу, так ведь неверно?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.027000000000000007 0.09600000000000003 0.28800000000000003\n"
     ]
    }
   ],
   "source": [
    "from math import factorial\n",
    "def comb(n, k):\n",
    "    return int(factorial(n) / (factorial(k) * factorial(n-k)))\n",
    "p1 = comb(3, 1) * ((0.9) ** 1) * ((0.1) ** 2)\n",
    "p2 = comb(3, 1) * ((0.8) ** 1) * ((0.2) ** 2)\n",
    "p3 = comb(3, 1) * ((0.6) ** 1) * ((0.4) ** 2)\n",
    "print (p1, p2, p3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "или может логично, что они такими и остаются, как изначально? у нас же один выстрел. Но вероятности  в сумме должны 1 дать."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.14699999999999996 0.14340740740740743 0.128\n",
      "0.4184074074074074\n"
     ]
    }
   ],
   "source": [
    "from math import factorial\n",
    "def comb(n, k):\n",
    "    return int(factorial(n) / (factorial(k) * factorial(n-k)))\n",
    "p1 = 0.9 / 3\n",
    "p2 = 0.8 / 3\n",
    "p3 = 0.6 / 3\n",
    "p11 = comb(1, 1) * ((p1) ** 1) * ((1 - p1) ** 2)\n",
    "p12 = comb(1, 1) * ((p2) ** 1) * ((1 - p2) ** 2)\n",
    "p13 = comb(1, 1) * ((p3) ** 1) * ((1 - p3) ** 2)\n",
    "print (p11, p12, p13)\n",
    "print (p11 + p12 + p13)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Задание 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.2 0.175 0.45\n"
     ]
    }
   ],
   "source": [
    "from math import factorial\n",
    "def comb(n, k):\n",
    "    return int(factorial(n) / (factorial(k) * factorial(n-k)))\n",
    "pa = 0.8 / 4\n",
    "pb = 0.7 / 4\n",
    "pc = 0.9 / 4 * 2\n",
    "print (pa, pb, pc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
